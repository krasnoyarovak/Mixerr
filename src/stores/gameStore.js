import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useGameStore = defineStore('game', () => {
  const phrase = ref('')
  const emojis = ref('')
  const originalPhrase = ref('')
  const showGuessInput = ref(false)
  const currentGuess = ref('')
  const guesses = ref([])
  const activeUserIndex = ref(0)
  const currentUserIndex = ref(1)
  const name = ref('')
  const message = ref('')

  const users = ref([
    { name: '–ò–≥—Ä–æ–∫ 1', avatar: new URL('@/assets/img/smile_laugh.png', import.meta.url).href },
    { name: '–ò–≥—Ä–æ–∫ 2', avatar: new URL('@/assets/img/smile_think.png', import.meta.url).href },
    { name: '–ò–≥—Ä–æ–∫ 3', avatar: new URL('@/assets/img/smile_win.png', import.meta.url).href }
  ])

  async function submitPhrase() {
    emojis.value = ''

    const prompt = `
–¢—ã ‚Äî Emoji MixBot, AI, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Ñ—Ä–∞–∑—ã –Ω–∞ —è–∑—ã–∫ —ç–º–æ–¥–∑–∏.  
–¢–≤–æ—è —Ü–µ–ª—å: —Ç–æ—á–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–º—ã—Å–ª –≤—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û —ç–º–æ–¥–∑–∏.

üìå –ü—Ä–∞–≤–∏–ª–∞:
1. ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —ç–º–æ–¥–∑–∏.  
2. ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—Å—Ç, —Å–∏–º–≤–æ–ª—ã, –∫–∞–≤—ã—á–∫–∏, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Ü–∏—Ñ—Ä—ã, HTML –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.  
3. üßµ –û—Ç–≤–µ—Ç ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞.  
4. üß† –ü–µ—Ä–µ–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤–æ–π —Å–º—ã—Å–ª —Ñ—Ä–∞–∑—ã.  
5. ‚õî –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.

üìé –ü—Ä–∏–º–µ—Ä—ã:

"—è –ª—é–±–ª—é –ø–∏—Ü—Ü—É" ‚Üí üçï‚ù§Ô∏è  
"—Ä–∞–±–æ—Ç–∞—é –Ω–æ—á—å—é" ‚Üí üíªüåôüß†  
"–∏–¥—É –Ω–∞ —É—á–µ–±—É" ‚Üí üè´üö∂‚Äç‚ôÇÔ∏è  
"–∫–æ—à–∫–∞ —Å–ø–∏—Ç" ‚Üí üê±üí§  
"–ª–µ—á—É –≤ –ü–∞—Ä–∏–∂" ‚Üí ‚úàÔ∏èüóº  
"–∏–≥—Ä–∞–µ—Ç –º—É–∑—ã–∫–∞" ‚Üí üé∂üîä  
"–±–µ–≥–∞—é –ø–æ —É—Ç—Ä–∞–º" ‚Üí üèÉ‚Äç‚ôÄÔ∏èüåÖ

üî§ –í—Ö–æ–¥–Ω–∞—è —Ñ—Ä–∞–∑–∞: "${phrase.value}"

üîÅ –ü–µ—Ä–µ–≤–µ–¥–∏ –≤ —ç–º–æ–¥–∑–∏ (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π):
`

    try {
      const res = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': 'Bearer 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',
          'Content-Type': 'application/json',
          'X-Title': 'mixerr',
          'HTTP-Referer': 'http://localhost:5173'
        },
        body: JSON.stringify({
          model: 'deepseek/deepseek-r1-0528-qwen3-8b:free',
          messages: [{ role: 'user', content: prompt }]
        })
      })

      const data = await res.json()
      if (data.error) throw new Error(data.error.message)

      emojis.value = data.choices?.[0]?.message?.content.trim() || ''
      originalPhrase.value = phrase.value.trim().toLowerCase()
      phrase.value = ''
      showGuessInput.value = true
      guesses.value = []
      currentUserIndex.value = (activeUserIndex.value + 1) % users.value.length
    } catch (err) {
      emojis.value = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞'
      console.error('–û—à–∏–±–∫–∞ API:', err)
    }
  }

  function submitGuess() {
    const normalizedGuess = currentGuess.value.trim().toLowerCase()
    const player = users.value[currentUserIndex.value]

    if (!player) {
      console.error('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–Ω–¥–µ–∫—Å—É:', currentUserIndex.value)
      return
    }

    const alreadyGuessed = guesses.value.some(g => g.name === player.name)
    if (alreadyGuessed) return

    const isCorrect = normalizedGuess === originalPhrase.value
    guesses.value.push({ name: player.name, correct: isCorrect })

    currentGuess.value = ''

    const nextIndex = (currentUserIndex.value + 1) % users.value.length
    if (nextIndex === activeUserIndex.value) {
      showGuessInput.value = false
      emojis.value = ''
      originalPhrase.value = ''
      setTimeout(() => {
        const winners = guesses.value.filter(g => g.correct).map(g => g.name)
        if (winners.length > 0) {
          const message = winners.length === 1
            ? `${winners[0]} —É–≥–∞–¥–∞–ª —Ñ—Ä–∞–∑—É! üéâ`
            : `${winners.join(' –∏ ')} —É–≥–∞–¥–∞–ª–∏ —Ñ—Ä–∞–∑—É! üéâ`
          alert(message)
        } else {
          alert('–ù–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª —Ñ—Ä–∞–∑—É üò¢')
        }
        guesses.value = []
        activeUserIndex.value = (activeUserIndex.value + 1) % users.value.length
        currentUserIndex.value = (activeUserIndex.value + 1) % users.value.length
      }, 100)
    } else {
      currentUserIndex.value = nextIndex
    }
  }
  
  function submitForm() {
    alert(`–°–ø–∞—Å–∏–±–æ, ${name.value}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message.value}"`)
    name.value = ''
    message.value = ''
  }
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç—ã
  const nickname = ref('')
  const avatar = ref('')
  const defaultAvatar = new URL('@/assets/img/smile_think.png', import.meta.url).href
  const roomCode = ref(generateRoomCode())

  function generateRoomCode() {
    return Math.random().toString(36).substring(2, 7).toUpperCase()
  }

  function handleAvatarUpload(e) {
    const file = e.target.files[0]
    if (file) avatar.value = URL.createObjectURL(file)
  }
  

  return {
    phrase,
    emojis,
    originalPhrase,
    showGuessInput,
    currentGuess,
    guesses,
    activeUserIndex,
    currentUserIndex,
    users,
    name,
    message,
    nickname,
    avatar,
    defaultAvatar,
    roomCode,
    handleAvatarUpload,
    submitPhrase,
    submitGuess,
    submitForm,
  }
})
